{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","services/makeFetch.js","services/infinityScroll.js","components/App/App.js","index.js"],"names":["Searchbar","state","targetValue","handleSubmit","e","preventDefault","props","onSubmt","handleChange","console","log","setState","target","value","className","onSubmit","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","id","webformatURL","largeImageURL","data-attribute","src","alt","data-index","ImageGallery","images","map","image","color","height","width","timeout","makeFetch","key","perPage","crateFetchFind","targetSearch","page","fetch","then","res","json","hits","IntersectionObserver","get","entries","observer","forEach","entry","isIntersecting","unobserve","rootMargin","App","searchQuery","pageQuery","handlerSearchQuery","query","options","onEntry","fetchImages","infinityScroll","prevProps","prevState","snapshot","data","lazyLoadImg","imageListItem","document","querySelectorAll","observe","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5976aafc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nexport default class Searchbar extends  Component{\r\n\r\n    state = {\r\n        targetValue: '',\r\n    }\r\n\r\n\r\n    handleSubmit =(e) =>{\r\n        e.preventDefault();\r\n        this.props.onSubmt(this.state.targetValue)\r\n\r\n    }\r\n\r\n    handleChange =(e) =>{\r\n        console.log(this)\r\n        this.setState({targetValue: e.target.value})\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"Searchbar\">\r\n                <form className=\"SearchForm\"  onSubmit={this.handleSubmit}>\r\n                    <button type=\"submit\" className=\"SearchForm-button\">\r\n                        <span className=\"SearchForm-button-label\">Search</span>\r\n                    </button>\r\n\r\n                    <input\r\n                        className=\"SearchForm-input\"\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                        value={this.state.targetValue}\r\n                        placeholder=\"Search images and photos\"\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </form>\r\n            </header>\r\n        )\r\n    }\r\n\r\n\r\n}","import React, { useState } from 'react';\r\nimport FsLightbox from 'fslightbox-react';\r\n\r\n\r\n\r\n\r\nexport default function  ImageGalleryItem({id, webformatURL, largeImageURL}) {\r\n\r\n\r\n\r\n    return(\r\n\r\n\r\n            <li  data-attribute=\"SRL\" id={id} className=\"ImageGalleryItem\"  >\r\n                <img src={webformatURL} alt=\"\" className=\"ImageGalleryItem-image\"  data-index={largeImageURL}/>\r\n            </li>\r\n\r\n\r\n    )\r\n}","\r\nimport ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\r\nimport { SRLWrapper } from \"simple-react-lightbox\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport FsLightbox from 'fslightbox-react';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner'\r\n\r\n\r\nexport default function ImageGallery({images}) {\r\n\r\n\r\n    // const [lightboxController, setLightboxController] = useState({\r\n    //     toggler: false,\r\n    //     slide: 1\r\n    // });\r\n    //\r\n    // let imageArr  = images.map(image=>image.largeImageURL);\r\n    //\r\n    //\r\n    // function openLightboxOnSlide(e) {\r\n    //\r\n    //     setLightboxController({\r\n    //         toggler: !lightboxController.toggler,\r\n    //         slide: 1\r\n    //     });\r\n    //     imageArr  = images.map(image=>image.largeImageURL);\r\n    // }\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // return(\r\n    //     <>\r\n    //     <ul className=\"ImageGallery\" onClick={() => openLightboxOnSlide(1)}>\r\n    //\r\n    //         {images.map(image=>{\r\n    //\r\n    //                 return ( <ImageGalleryItem id={image.id} webformatURL={image.webformatURL} largeImageURL={image.largeImageURL} />)\r\n    //             }\r\n    //\r\n    //         )}\r\n    //\r\n    //\r\n    //     </ul>\r\n    //\r\n    //         <FsLightbox\r\n    //             toggler={lightboxController.toggler}\r\n    //             sources={imageArr}\r\n    //             slide={lightboxController.slide}\r\n    //         />\r\n    // </>\r\n    return(\r\n\r\n    <SRLWrapper>\r\n\r\n        <ul className=\"ImageGallery\">\r\n\r\n            {images.map(image=>{\r\n                    console.log(image)\r\n                    return ( <ImageGalleryItem id={image.id} webformatURL={image.webformatURL} largeImageURL={image.largeImageURL} />)\r\n                }\r\n\r\n            )}\r\n\r\n\r\n\r\n        </ul>\r\n        <Loader\r\n            type=\"Puff\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n            timeout={3000} //3 secs\r\n\r\n        />\r\n    </SRLWrapper>\r\n\r\n    )\r\n}","const makeFetch = {\r\n\r\n    key: '18291614-3687f9869972091b65dd4882c',\r\n    perPage: 12,\r\n\r\n\r\n    crateFetchFind(targetSearch , page){\r\n        console.log(page)\r\n        return fetch(`https://pixabay.com/api/?image_type=photo&orientation=horizontal&q=\r\n        ${targetSearch}&page=${page}&per_page=${this.perPage}&key=${this.key}`)\r\n            .then(res=>res.json())\r\n            .then(({hits})=>{\r\n\r\n                return hits;\r\n            });\r\n    },\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default  makeFetch","\r\nimport App from \"../components/App/App\";\r\n\r\nconst options = {\r\n    rootMargin: '250px',\r\n}\r\n\r\nexport  function f(get) {\r\n\r\n    return   (entries, observer) =>{\r\n        entries.forEach(entry =>{\r\n\r\n            if(entry.isIntersecting){\r\n                observer.unobserve(entry.target);\r\n                get();\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst  infinityScroll = new IntersectionObserver(f, options);\r\n\r\n\r\nexport default infinityScroll;","import React, { Component } from 'react';\r\nimport Searchbar from   '../Searchbar/Searchbar'\r\nimport ImageGallery from \"../ImageGallery/ImageGallery\";\r\nimport makeFetch from \"../../services/makeFetch\";\r\nimport IO from \"../../services/infinityScroll\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\n\r\n\r\n\r\nexport default class  App extends Component{\r\n\r\n    state = {\r\n        images: [],\r\n        searchQuery: '',\r\n        pageQuery: 1\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n\r\n\r\n        if (prevState.searchQuery !== this.state.searchQuery ){\r\n            this.setState(prevState=>({images: [], pageQuery: 0}))\r\n            this.fetchImages()\r\n            console.log(makeFetch)\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    fetchImages(){\r\n\r\n        makeFetch.crateFetchFind(this.state.searchQuery, this.state.pageQuery).then(data=>{\r\n                this.setState(prevState => ({\r\n                    images: [...prevState.images, ...data],\r\n                    pageQuery: prevState.pageQuery++,\r\n                }))\r\n               this.lazyLoadImg()\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    handlerSearchQuery =(query)=>{\r\n        this.setState({\r\n            searchQuery : query,\r\n        })\r\n    }\r\n\r\n\r\n\r\n     options = {\r\n        rootMargin: '250px',\r\n    }\r\n    onEntry = (entries, observer) =>{\r\n        entries.forEach(entry =>{\r\n\r\n            if(entry.isIntersecting){\r\n                console.log('зашли onEntry')\r\n                observer.unobserve(entry.target);\r\n                this.fetchImages()\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    infinityScroll = new IntersectionObserver(this.onEntry, this.options);\r\n\r\n\r\n    lazyLoadImg() {\r\n        console.log('зашли lazyLoadImg')\r\n        const imageListItem = document.querySelectorAll('.ImageGalleryItem');\r\n        this.infinityScroll.observe(imageListItem[imageListItem.length-1]);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n      return(\r\n          <>\r\n              <SimpleReactLightbox>\r\n           <Searchbar onSubmt ={this.handlerSearchQuery}/>\r\n              {this.state.images.length>0 && <ImageGallery images={this.state.images}/> }\r\n              </SimpleReactLightbox>\r\n\r\n          </>\r\n      )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from  './components/App/App'\nimport './styles.css'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <>\n\n          <App />\n\n      </>\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}