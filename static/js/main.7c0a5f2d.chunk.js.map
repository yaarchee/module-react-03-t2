{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","services/makeFetch.js","components/App/App.js","index.js"],"names":["Searchbar","state","targetValue","handleSubmit","e","preventDefault","props","onSubmt","handleChange","console","log","setState","target","value","className","onSubmit","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","id","webformatURL","largeImageURL","data-attribute","src","alt","data-index","ImageGallery","images","map","image","key","color","height","width","timeout","makeFetch","perPage","crateFetchFind","targetSearch","page","fetch","then","res","json","hits","App","searchQuery","pageQuery","fetchImages","data","prevState","lazyLoadImg","handlerSearchQuery","query","options","rootMargin","onEntry","entries","observer","forEach","entry","isIntersecting","unobserve","infinityScroll","IntersectionObserver","prevProps","snapshot","imageListItem","document","querySelectorAll","observe","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7c0a5f2d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Searchbar extends Component {\r\n  state = {\r\n    targetValue: \"\",\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmt(this.state.targetValue);\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    console.log(this);\r\n    this.setState({ targetValue: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            value={this.state.targetValue}\r\n            placeholder=\"Search images and photos\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport FsLightbox from \"fslightbox-react\";\r\n\r\nexport default function ImageGalleryItem({ id, webformatURL, largeImageURL }) {\r\n  return (\r\n    <li data-attribute=\"SRL\" id={id} className=\"ImageGalleryItem\">\r\n      <img\r\n        src={webformatURL}\r\n        alt=\"\"\r\n        className=\"ImageGalleryItem-image\"\r\n        data-index={largeImageURL}\r\n      />\r\n    </li>\r\n  );\r\n}\r\n","import ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\r\nimport { SRLWrapper } from \"simple-react-lightbox\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport FsLightbox from \"fslightbox-react\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport default function ImageGallery({ images }) {\r\n  // const [lightboxController, setLightboxController] = useState({\r\n  //     toggler: false,\r\n  //     slide: 1\r\n  // });\r\n  //\r\n  // let imageArr  = images.map(image=>image.largeImageURL);\r\n  //\r\n  //\r\n  // function openLightboxOnSlide(e) {\r\n  //\r\n  //     setLightboxController({\r\n  //         toggler: !lightboxController.toggler,\r\n  //         slide: 1\r\n  //     });\r\n  //     imageArr  = images.map(image=>image.largeImageURL);\r\n  // }\r\n  //\r\n  //\r\n  //\r\n  //\r\n  // return(\r\n  //     <>\r\n  //     <ul className=\"ImageGallery\" onClick={() => openLightboxOnSlide(1)}>\r\n  //\r\n  //         {images.map(image=>{\r\n  //\r\n  //                 return ( <ImageGalleryItem id={image.id} webformatURL={image.webformatURL} largeImageURL={image.largeImageURL} />)\r\n  //             }\r\n  //\r\n  //         )}\r\n  //\r\n  //\r\n  //     </ul>\r\n  //\r\n  //         <FsLightbox\r\n  //             toggler={lightboxController.toggler}\r\n  //             sources={imageArr}\r\n  //             slide={lightboxController.slide}\r\n  //         />\r\n  // </>\r\n  return (\r\n    <SRLWrapper>\r\n      <ul className=\"ImageGallery\">\r\n        {images.map((image) => {\r\n          console.log(image);\r\n          return (\r\n            <ImageGalleryItem\r\n              id={image.id}\r\n              webformatURL={image.webformatURL}\r\n              largeImageURL={image.largeImageURL}\r\n              key={image.id}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n      <Loader\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n        timeout={3000} //3 secs\r\n      />\r\n    </SRLWrapper>\r\n  );\r\n}\r\n","const makeFetch = {\r\n  key: \"18291614-3687f9869972091b65dd4882c\",\r\n  perPage: 12,\r\n\r\n  crateFetchFind(targetSearch, page) {\r\n    console.log(page);\r\n    return fetch(`https://pixabay.com/api/?image_type=photo&orientation=horizontal&q=\r\n        ${targetSearch}&page=${page}&per_page=${this.perPage}&key=${this.key}`)\r\n      .then((res) => res.json())\r\n      .then(({ hits }) => {\r\n        return hits;\r\n      });\r\n  },\r\n};\r\n\r\nexport default makeFetch;\r\n","import React, { Component } from \"react\";\r\nimport Searchbar from \"../Searchbar/Searchbar\";\r\nimport ImageGallery from \"../ImageGallery/ImageGallery\";\r\nimport makeFetch from \"../../services/makeFetch\";\r\n// import IO from \"../../services/infinityScroll\";\r\n\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    images: [],\r\n    searchQuery: \"\",\r\n    pageQuery: 1,\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevState.searchQuery !== this.state.searchQuery) {\r\n      this.fetchImages();\r\n    }\r\n  }\r\n\r\n  fetchImages = () => {\r\n    makeFetch\r\n      .crateFetchFind(this.state.searchQuery, this.state.pageQuery)\r\n      .then((data) => {\r\n        this.setState((prevState) => ({\r\n          images: [...prevState.images, ...data],\r\n          pageQuery: prevState.pageQuery + 1,\r\n        }));\r\n        this.lazyLoadImg();\r\n      });\r\n  };\r\n\r\n  handlerSearchQuery = (query) => {\r\n    this.setState({\r\n      searchQuery: query,\r\n      images: [],\r\n      pageQuery: 1,\r\n    });\r\n  };\r\n\r\n  options = {\r\n    rootMargin: \"50px\",\r\n  };\r\n  onEntry = (entries, observer) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        console.log(\"зашли onEntry\");\r\n        observer.unobserve(entry.target);\r\n        this.fetchImages();\r\n      }\r\n    });\r\n  };\r\n\r\n  infinityScroll = new IntersectionObserver(this.onEntry, this.options);\r\n\r\n  lazyLoadImg() {\r\n    console.log(\"зашли lazyLoadImg\");\r\n    const imageListItem = document.querySelectorAll(\".ImageGalleryItem\");\r\n    this.infinityScroll.observe(imageListItem[imageListItem.length - 1]);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <SimpleReactLightbox>\r\n          <Searchbar onSubmt={this.handlerSearchQuery} />\r\n          {this.state.images.length > 0 && (\r\n            <ImageGallery images={this.state.images} />\r\n          )}\r\n        </SimpleReactLightbox>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from  './components/App/App'\nimport './styles.css'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <>\n\n          <App />\n\n      </>\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}